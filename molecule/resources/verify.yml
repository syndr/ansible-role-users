---
# Verify that the role being tested has done what it's supposed to

- name: Verify
  hosts: molecule
  vars:
    ansible_user: molecule_runner
  tasks:
    - name: Load local facts
      ansible.builtin.setup:
        gather_subset:
          - '!all'
          - '!min'
          - local

    - name: Load user creds
      ansible.builtin.set_fact:
        user_creds: "{{ ansible_local.molecule.user_creds }}"

    - name: Test user authentication
      block:
        - name: Attempt admin logon
          become: true
          become_user: testuser
          ansible.builtin.shell:
            cmd: echo '{{ user_creds.testadmin_pw }}' | su - testadmin -c 'echo success'
          register: testadmin_login_result
          changed_when: false

        - name: Show login output
          ansible.builtin.debug:
            msg: "{{ testadmin_login_result.stdout }}"

        - name: Attempt sudo as admin user
          become: true
          become_user: testadmin
          ansible.builtin.command:
            cmd: sudo -n ls
          changed_when: false

        - name: Attempt ssh login with key
          block:
            - name: Attempt ssh login
              ansible.builtin.command:
                cmd: ssh -o StrictHostKeyChecking=no -p {{ ci_ssh_port | default(22) }} testuser@localhost 'echo success'
              register: testuser_ssh_result
              changed_when: false

            - name: Show ssh login output
              ansible.builtin.debug:
                msg: "{{ testuser_ssh_result.stdout }}"

    - name: Verify expected users exist
      loop:
        - testadmin
        - testuser
        - test_application_user
        - test_ssh_keygen_user
        - test_ssh_privkey_user
        - test_temporary_user
      loop_control:
        loop_var: __user
      ansible.builtin.command:
        cmd: getent passwd {{ __user }}
      changed_when: false

    - name: Verify privkey user has valid private key
      become: true
      ansible.builtin.command:
        cmd: ssh-keygen -y -f /home/test_ssh_privkey_user/.ssh/id_rsa
      register: test_ssh_privkey_user_pubkey
      changed_when: false
      failed_when: test_ssh_privkey_user_pubkey.rc != 0 or 'testuser@molecule' not in test_ssh_privkey_user_pubkey.stdout

    - name: Verify user expiration date
      vars:
        __user_expiration_account: test_temporary_user
      block:
        - name: Get user expiration date
          become: true
          ansible.builtin.shell:
            cmd: chage -l {{ __user_expiration_account }}
          register: user_expiration_result
          changed_when: false

        - name: Extract expiration information
          ansible.builtin.set_fact:
            user_expiration_info: "{{ user_expiration_result.stdout_lines | select('search', '^Account expires.*') | list }}"

        - name: Show expiration information
          ansible.builtin.debug:
            msg: "{{ user_expiration_info }}"

        - name: Verify expiration date
          ansible.builtin.assert:
            that:
              - user_expiration_info | length == 1
              - user_expiration_info[0] | regex_search('Account expires.*never') is not truthy
            fail_msg: "User {{ __user_expiration_account }} should have an expiration date"
            success_msg: "User {{ __user_expiration_account }} has an expiration date"

        - name: Attempt expired login
          ansible.builtin.command:
            cmd: ssh -o StrictHostKeyChecking=no -p {{ ci_ssh_port | default(22) }} {{ __user_expiration_account }}@localhost 'echo success'
          register: expired_user_ssh_result
          changed_when: false
          failed_when: expired_user_ssh_result.rc == 0

        - name: Validate login output
          ansible.builtin.assert:
            that:
              - expired_user_ssh_result.stderr is search('account has expired')
            fail_msg: "Account does not report expired status! {{ expired_user_ssh_result.stderr }}"
            success_msg: "Account reports expired status"

    - name: Test user removal
      block:
        - name: Start a process as the test user
          become: true
          become_user: testadmin
          ansible.builtin.shell:
            cmd: sleep 600 &
          async: 60
          poll: 0
          register: testuser_sleep

        - name: Remove test admin user
          ansible.builtin.include_role:
            name: users
          vars:
            server_users:
              - username: testadmin
                state: absent

        - name: Attempt admin logon (should be unsuccessful)
          become: true
          become_user: testuser
          ansible.builtin.shell:
            cmd: echo '{{ user_creds.testadmin_pw }}' | su - testadmin -c 'echo fail'
          register: testadmin_login_result
          changed_when: false
          failed_when: testadmin_login_result.rc != 1

